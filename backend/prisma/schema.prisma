// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupID   String?  @db.ObjectId
  group     Group?   @relation(fields: [groupID], references: [id])
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  year      Int?

  preferences HousingPreferences?
  requests    Request[]
  invites     Invite[]
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]
  createdAt DateTime @default(now())

  name        String
  description String?
  numRoomates Int?
  openToJoin        Boolean
  requests    Request[]
  invitations Invite[]
  preferences HousingPreferences?

  @@index([name])
}

model Request {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id])

  groupID String @db.ObjectId
  group   Group  @relation(fields: [groupID], references: [id])

  status  String
  message String?

  @@index([userID, groupID])
}

model Invite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id])

  groupID String @db.ObjectId
  group   Group  @relation(fields: [groupID], references: [id])

  status  String
  message String?

  @@index([userID, groupID])
}

model HousingPreferences {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userID String? @unique @db.ObjectId
  user   User?   @relation(fields: [userID], references: [id])

  groupID String? @unique @db.ObjectId
  group   Group?  @relation(fields: [groupID], references: [id])

  preferredHousing HousingPreferencesM2M[]
  preferences      PreferenceHousingPreferencesM2M[]
}

model PreferenceHousingPreferencesM2M {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  preferencesID String             @db.ObjectId
  housingPreferences   HousingPreferences @relation(fields: [preferencesID], references: [id])

  preferenceID String     @db.ObjectId
  preference   Preference @relation(fields: [preferenceID], references: [id])
}

model Preference {
  id                 String                            @id @default(auto()) @map("_id") @db.ObjectId
  relatedPreferences PreferenceHousingPreferencesM2M[]

  category   String
  value      String
  options   String[]
  importance String
}

model Housing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  relatedPreferences HousingPreferencesM2M[]

  name String? @unique

  // Apartment Details
  isApartment  Boolean?
  numBedrooms  Int?
  numBathrooms Int?
  parking      Boolean?

  // Dorm Details
  numRoommates     Int?
  communalBathroom Boolean?
  sharedBathroom   Boolean?
  privateBathroom  Boolean?
}

model HousingPreferencesM2M {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  housingID String  @db.ObjectId
  housing   Housing @relation(fields: [housingID], references: [id])

  preferencesID String             @unique @db.ObjectId
  preferences   HousingPreferences @relation(fields: [preferencesID], references: [id])
}
